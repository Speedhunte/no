#include <iostream>
#include <string>
#include <fstream>
#include <iomanip>
#include <vector>
#include <thread>


using namespace std;

template<typename T>
class Matrix {

private:
    int N;// строки
    int M;// столбцы

public:
    vector <vector <T>> data;




    void in() { //метод заполняет матрицу значениями из файла
        ifstream input("output.txt");
        if (!input) {
            cout << "Файл не найден" << endl;
        }
        input >> N;
        input >> M;

        data.resize(N, vector <T>(M));
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < M; j++)
                input >> this->data[i][j];
        }


    }


    void out() { //метод выгружает  матрицу и ее размер в файл
        ofstream output("output.txt ");
        if (!output)
            cout << " файл не открывается" << endl;

        output << this->N << endl;
        output << this->M << endl;


        for (int i = 0; i < this->N; i++) {

            for (int j = 0; j < this->M; j++)
                output << this->data[i][j];
        }
        output << endl;


    }



    Matrix(int N, int M) { //конструктор создает матрицу указанного размера и заполняет нулями
        this->N = N;
        this->M = M;
        this->data.resize(N, vector <T>(M));
        for (int i = 0; i < N; i++)
            for (int j = 0; j < M; j++)
                data[i][j] = 0;

    }


    Matrix() { //конструктор считывает из файла
        ifstream input("output.txt");

        if (!input) {
            cout << "Файл не найден" << endl;
        }
        else {
            input >>N;
            input >>M;
            data.resize(N, vector <T>(M));

            for (int i = 0; i < N; i++)
                for (int j = 0; j < M; j++)
                    input >> data[i][j];
        }

    }


    Matrix<T> operator *(const Matrix& other) //перегрузка умножения матриц
    {
        Matrix <T> temp(other.N, other.M);

        if (this->M != other.N)
            cout << "Нельзя умножить";
        else {
            for (int i = 0; i < other.N; i++) {
                for (int j = 0; j < other.M; j++) {

                    temp.data[i][j] = 0;
                    for (int k = 0; k < other.N; k++)
                        temp.data[i][j] += (this->data[i][k] * other.data[k][j]);

                }
            }
            return temp;
        }

    }



    Matrix<T> operator *(int a) // прегрузка оператор умножения матрицы на скаляр
    {
        Matrix <T> temp(this->N, this->M);

        for (int i = 0; i < this->N; i++) {
            for (int j = 0; j < this->M; j++)
            {
                temp.data[i][j] = 0;
                temp.data[i][j] += this->data[i][j] * a;
            }
        }
        return temp;
    }


    Matrix<T> operator +(const Matrix& other) //перегрузка сложения матриц
    {
        if (this->N == other.N && this->M == other.M)
        {
            Matrix <T> temp(this->N, this->M);
            for (int i = 0; i < this->N; i++) {
                for (int j = 0; j < this->M; j++) {
                    temp.data[i][j] = 0;
                    temp.data[i][j] += (this->data[i][j] + other.data[i][j]);
                }
            }
            return temp;
        }
        else {
            cout << "сложить нельзя" << endl;
        }


    }


    Matrix <T> operator -(const Matrix& other) //перегрузка вычитания матриц
    {
        if (this->N = other.N && this->M = other.M)
        {
            Matrix <T> temp(this->N, this->M);
            for (int i = 0; i < this->N; i++) {
                for (int j = 0; j < this->M; j++)
                    temp.data[i][j] += (this->data[i][j] - other.data[i][j]);
            }
            return temp;
        }
        else {
            cout << "вычесть нельзя" << endl;
        }
    }


    bool operator ==(const Matrix& other) { // проверка на равенство матриц

        if (this->N = other.N && this->M = other.M) {
            for (int i = 0; i < this->N; i++) {
                for (int j = 0; j < this->M; j++) {
                    if (this->data[i][j] != other.data[i][j])
                        return false;
                }
            }

        }
    }




    bool operator ==(int a) //проверка, является матрица единичной или нулевой
    {
        if (a == 1 and this->N == this->M)
        {
            for (int i = 0; i < this->N; i++) {
                for (int j = 0; j < this->M; j++)
                    if (i == j && this->data[i][j] != 1)
                        return false;
                    else {
                        if (this->data[i][j] != 0)
                            return false;
                    }

            }
        }
        if (a == 0)
        {
            for (int i = 0; i < this->N; i++)
                for (int j = 0; j < this->M; j++)
                    if (this->data[i][j] != 0)
                        return false;
        }
        else {
            cout << "с такими числами не сравниваем" << endl;
        }
    }



    Matrix<T> & operator = (const Matrix& other) //перегрузка оператора присваивания
    {
        this->N = other.N;
        this->M = other.M;

        this->data.resize(N, vector <T>(M));
        for (int i = 0; i < this->N; i++) {
            for (int j = 0; j < this->M; j++)
                this->data[i][j] = other.data[i][j];
        }
        return *this;
    }




    static Matrix<T> Matrix0(int N, int M) // статический метод создания нулевой матрицы
    {
        Matrix <T> a(N, M);
        return a;
    }


    static Matrix<T> Matrix1(int N, int M)// статический метод создания единичной матрицы
    {
        if (N == M)
        {
            Matrix <T> b(N, M);//вызываем конструктор, который заполнит матрицу нулями
            for (int i = 0; i < N; i++)

                b.data[i][i] = 1;
            return b;
        }
        else
        {
            cout << "нельзя создать единичную матрицу" << endl;
        }

    }



 Matrix <T> helpsum( Matrix<T> &a, Matrix<T> &b, Matrix<T> &res, int Number)
 {
     int M=a.M;
     for (int i=N;i<=N;i++)
     {
         for (int j=0;j<M;j++)
            res[i][j]+=(a[i][j]+b[i][j]);
     }
     return res;
 }


 Matrix <T> parallelSum( const Matrix<T>& a, const Matrix<T>& b,int Number)
 {
     if (a.n!=b.n || a.M!=b.M)
        cout<<"нельзя сложить";
     vector <thread*> threads ={};
     Matrix<T> res(a.N,a.M);
     for (int i=0;i<a.N;i++)
        threads.emplace_back(new thread(helpsum,ref(a),ref(b),ref(res),i));

     for (int i=0; i<threads.size();i++)
        threads[i]->join();
 }

};
int main()

{
    setlocale(LC_ALL, "ru");

}
